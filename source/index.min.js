export class PickError extends Error{}function inplace(o){let e,r=o.length;for(;0!=r;)e=Math.floor(Math.random()*r),r--,[o[r],o[e]]=[o[e],o[r]];return o}function copy(o){let e,r=Array.isArray(o)?[]:{};for(const n in o)e=o[n],r[n]="object"==typeof e?copy(e):e;return r}function outplace(o){for(var e,r=[],n=o.length;n;)e=Math.floor(Math.random()*n--),r.push(o.splice(e,1)[0]);return r}const reggie={version:"1.0.5",shallowcap:o=>o.charAt(0).toUpperCase()+o.slice(1),arbintrary:(o,e)=>Math.floor(Math.random()*(e-o+1))+o,ishuffle:inplace,deepclone:copy,shallowclone:o=>Array.isArray(o)?[...o]:{...o},concat:(...o)=>o.reduce((o,e)=>[...o,...e]),ranbool:()=>Math.random()>=.5,picksome:(o,e)=>{const r=outplace(o);if(e===o.length)return r;if(e>o.length||e<1)throw new PickError(`Count not in range of 1-${o.length}.`);if(1===e)return r[0];if(!Number.isInteger(e))throw new PickError("Count must be an integer.");return r.slice(0,e)},diagonal:o=>o*Math.sqrt(2),shuffle:outplace},{version:version,shallowcap:shallowcap,arbintrary:arbintrary,ishuffle:ishuffle,deepclone:deepclone,shallowclone:shallowclone,concat:concat,ranbool:ranbool,picksome:picksome,diagonal:diagonal,shuffle:shuffle,json:json}=reggie;export{version,shallowcap,arbintrary,ishuffle,deepclone,shallowclone,concat,ranbool,picksome,diagonal,shuffle,json};export default reggie;