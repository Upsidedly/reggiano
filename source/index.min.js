import{readFile}from"fs/promises";export class PickError extends Error{}export class JsonError extends Error{}function inplace(r){let o,e=r.length;for(;0!=e;)o=Math.floor(Math.random()*e),e--,[r[e],r[o]]=[r[o],r[e]];return r}function copy(r){let o,e=Array.isArray(r)?[]:{};for(const n in r)o=r[n],e[n]="object"==typeof o?copy(o):o;return e}function outplace(r){for(var o,e=[],n=r.length;n;)o=Math.floor(Math.random()*n--),e.push(r.splice(o,1)[0]);return e}const reggie={version:"1.0.5",shallowcap:r=>r.charAt(0).toUpperCase()+r.slice(1),arbintrary:(r,o)=>Math.floor(Math.random()*(o-r+1))+r,ishuffle:inplace,deepclone:copy,shallowclone:r=>Array.isArray(r)?[...r]:{...r},concat:(...r)=>r.reduce((r,o)=>[...r,...o]),ranbool:()=>Math.random()>=.5,picksome:(r,o)=>{const e=outplace(r);if(o===r.length)return e;if(o>r.length||o<1)throw new PickError(`Count not in range of 1-${r.length}.`);if(1===o)return e[0];if(!Number.isInteger(o))throw new PickError("Count must be an integer.");return e.slice(0,o)},diagonal:r=>r*Math.sqrt(2),shuffle:outplace,json:async r=>{try{const o=await readFile(r,"utf8");return JSON.parse(o)}catch(o){throw new JsonError(`Could not read JSON file at ${r}.`)}}},{version:version,shallowcap:shallowcap,arbintrary:arbintrary,ishuffle:ishuffle,deepclone:deepclone,shallowclone:shallowclone,concat:concat,ranbool:ranbool,picksome:picksome,diagonal:diagonal,shuffle:shuffle,json:json}=reggie;export{version,shallowcap,arbintrary,ishuffle,deepclone,shallowclone,concat,ranbool,picksome,diagonal,shuffle,json};export default reggie;